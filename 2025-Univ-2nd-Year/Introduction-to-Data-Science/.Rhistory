select(season, grade, percent)
q
# 2021년도 계절별 평균 미세먼지 농도 그래프
ggplot(data=q,
aes(
x=season,
y=percent,
fill=grade
)) + geom_col(position='stack')
ggplot(data=q,
aes(
x=season,
y=percent,
fill=grade
)) + geom_col(position='dodge')
myAirQuality = read.csv(
"seoulAirQuality2021.csv",
header = TRUE,
fileEncoding = "CP949",
encoding = "UTF-8"
)
library(lubridate)
library(dplyr)
library(tidyr)
dim(myAirQuality)
str(myAirQuality)
names(myAirQuality) = c("date", "district", "PM10", "PM2.5")
myAirQuality = myAirQuality %>%
filter(district != "평균")
myAirQuality$district = as.factor(myAirQuality$district)
levels(myAirQuality$district)
myAirQuality$date = as.Date(myAirQuality$date)
# 계절 분류
myAirQuality$season <- ifelse(
month(myAirQuality$date) %in% c(3, 4, 5), "spring",
ifelse(month(myAirQuality$date) %in% c(6, 7, 8), "summer",
ifelse(month(myAirQuality$date) %in% c(9, 10, 11), "fall", "winter"))
)
myAirQuality$season = as.factor(myAirQuality$season)
levels(myAirQuality$season)
head(myAirQuality)
# 2021 년도에 각 구 별로 평균 미세먼지 농도를 비교하여라
library(ggplot2)
myAirQuality$grade = ifelse(
myAirQuality$PM10 <= 30, "좋음",
ifelse(myAirQuality$PM10 <= 80, "보통",
ifelse(myAirQuality$PM10 <= 150, "나쁨", "매우나쁨"))
)
myAirQuality$season = factor(myAirQuality$season,
levels = c("spring", "summer", "fall", "winter"))
myAirQuality$grade = factor(myAirQuality$grade,
levels = c("좋음", "보통", "나쁨", "매우나쁨"))
q = myAirQuality %>%
filter(!is.na(grade))%>%
group_by(season,grade) %>%
summarise(count=n()) %>%
mutate(
total=sum(count),
percent=round(count/total*100,1)
) %>%
select(season, grade, percent)
q
ggplot(data=q,
aes(
x=season,
y=percent,
fill=grade
)) + geom_col(position='stack')
ggplot(data=q,
aes(
x=season,
y=percent,
fill=grade
)) + geom_col(position='dodge')
for (i in 1:10) print(i)
sum1
sum1 = 0
for (i in seq(1,10, by=1))
sum1 = sum1 + i
sum1
sum3 = 0
i = 1
repeat {
sum3 = sum3 + i
i = i+1
if(i>10) break
}
sum3
for (i in 1:30) {
print(ifelse(i %% 2 == 0, "even", "odd"))
}
ifelse(i %% 2 == 0, print("even"), )
# %/% 몫 기능
# / 나눗셈 기능
for (i in 1:30) {
ifelse(i %% 2 == 0, print("even"), )
}
fibo = function(n) {
if(n==1 || n==2) {
return(1)
}
return(fibo(n-1) + fibo(n-2))
}
fibo(4)
fibo(100)
fibo = function(n) {
if(n==1 || n==2) {
return(1)
}
return(fibo(n-1) + fibo(n-2))
}
fibo(1)
fibo(2)
fibo(3)
fibo(4)
fibo(5)
fibo(6)
fibo(100)
calculator = function(x, type) {
switch(type,
mean = mena(x)
sum = sum(x),
calculator = function(x, type) {
switch(type,
mean = mean(x),
sum = sum(x),
print("unexpected type"))
}
x = c(1:10)
calculator(x, "mean")
calculator(x, "sum")
calculator(x, "sd")
f(y=2, x=1)
f(y=2, x=1)
f = function(x,y) { # 두개의 인자를 가짐
print(x)
print(y)
}
f(1,2)
f(y=2, x=1)
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = fucntion(...) {
f = function(...) {
args = list(...)
for (a in args){
print(a)
}
}
print(c(1,2,3,4,5,65))
# 중첩함수
f = function(x,y) {
print(x)
g = function(y) {
print(y)
}
g(y)
}
# 중첩함수
f = function(x,y) {
print(x)
g = function(y) {
print(y)
}
g(y)
}
f(1,2)
b = 0
f= function() {
a=1
g= function() {
a<<-2
b<<-2
print(a)
print(b)
}
g()
print(a)
print(b)
}
f()
b = 0
f= function() {
a=1
g= function() {
a=2
b=2
print(a)
print(b)
}
g()
print(a)
print(b)
}
f()
b = 0
f= function() {
a=1
g= function() {
a<<-2
b<<-2
print(a)
print(b)
}
g()
print(a)
print(b)
}
f()
b = 0
f= function() {
a=1
g= function() {
a=2
b=2
print(a)
print(b)
}
g()
print(a)
print(b)
}
f()
b = 0
f= function() {
a=1
g= function() {
a<<-2
b<<-2
print(a)
print(b)
}
g()
print(a)
print(b)
}
f()
##################################################
queue = function() {
q = c()
q_size = 0
enqueue = function(data) {
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue = function() {
head = q[1]
q <<- q[-1]
q_size <<- q_size - 1
return ()
}
size  = function() {
return (q_size)
}
return(list(enqueue=enqueue, dequeue=dequeue, size=size))
}
q = queue()
q$enqueue(1)
q$dequeue()
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$dequeue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$dequeue()
q$size()
q$dequeue()
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$size()
q$dequeue()
#################################################
queue = function() {
q = c()
q_size = 0
enqueue = function(data) {
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue = function() {
first = q[1]
q <<- q[-1]
q_size <<- q_size - 1
return (fisrt)
}
size  = function() {
return (q_size)
}
return(list(enqueue=enqueue, dequeue=dequeue, size=size))
}
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$size()
q$dequeue()
q$dequeue()
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$size()
q$dequeue()
##################################################
queue = function() {
q = c()
q_size = 0
enqueue = function(data) {
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue = function() {
first = q[1]
q <<- q[-1]
q_size <<- q_size - 1
return (first)
}
size  = function() {
return (q_size)
}
return(list(enqueue=enqueue, dequeue=dequeue, size=size))
}
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$size()
q$dequeue()
##################################################
q_size = 100
q$size()
fun = function() {
answer = readline("y/n 을 입력하세요: ")
if(substr(answer,1,1) == "n")
cat("n을 입력받았습니다.")
else
cat("y를 입력받았습니다.")
}
ㅛ
funMenu = function() {
answer = menu(c("orange", "red", "blue"))
if(answer==1) {
cat("your input is orange")
} else if(answer == 2) {
cat("your input is grape")
} else {
cat("your input is kiwi")
}
}
1
funMenu = function() {
answer = menu(c("orange", "red", "blue"))
if(answer==1) {
cat("your input is orange")
} else if(answer == 2) {
cat("your input is grape")
} else {
cat("your input is kiwi")
}
}
funMenu()
fibolist()
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
whlie () {
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
whlie (i < size - 2) {
num2 = readline("input number") + num1
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
whlie (i < size - 2) {
while (i < size - 2) {
num1 = num2
num2 = readline("input number")
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (i < size - 2) {
num1 = num2
num2 = readline("input number")
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
}
fibolist()
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (i < size - 2) {
num1 = num2
num2 = readline("input number")
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
}
fibolist(20)
fibolist(20)
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (i < size - 2) {
num1 = num2
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
}
fibolist(20)
fibolist(20)
fibolist(3)
while (count < size) {
num1 = num2
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
count = count + 1
}
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greater than 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (count < size) {
num1 = num2
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
count = count + 1
}
print(fibonacci)
}
fibolist(20)
