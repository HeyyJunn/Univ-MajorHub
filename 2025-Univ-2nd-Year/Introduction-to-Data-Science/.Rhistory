# $address
# [1] "seoul"
# $tel
# [1] "01088881111"
# $ssn
# [1] 10815
# 리스트의 특정 값 추출
member$name
member[1:3]
# 리스트에 값 추가
member$pay <- 100
member
# $pay
# [1] 100
getwd()
score=read.csv("score.csv")
score
fruit
no = c(1,2,3,4)
name = c("apple", "pear", "banana", "peach")
price = c(100, 200, 300, 400)
fruit = data.frame(No=no, Name=name, Price=price)
fruit
write.csv(fruit, "fruit.csv")
getwd()
getwd()
(x=read.csv("score.csv"))
str(x)
getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x$score)
mean(x$score, na.rm=T)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x$score)
mean(x$score, na.rm=T)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x$1score, na.rm=T)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
(x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1))
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil")
str(x1))
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
x
y
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
rm(list=ls())
x
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
rm(list=ls())
x
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
rm(list=ls())
load("xy.RData")
x
y
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
myTCASchools = as_tibble(myCASchools)
install.packages("tibble")
Library(tibble)
library(tibble)
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
myTCASchools = as_tibble(myCASchools)
class(myTCASchools)
myTCASchools
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
myTCASchools = as_tibble(myCASchools)
class(myTCASchools)
myTCASchools
summaryBy(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
# 1. 패키지 설치 (처음 한 번만)
install.packages("doBy")
# 2. 패키지 로드 (매번 사용 전)
library(doBy)
# 3. summaryBy 사용
summaryBy(Sepal.Width + Sepal.Length ~ Species, data = iris)
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
# ~ 는 Species 를 기준으로
summaryBy(Petal.Width+Peatal.Length~Species, iris)
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
# ~ 는 Species 를 기준으로
summaryBy(Petal.Width+Petal.Length~Species, iris)
########################################
order(iris$Sepal.Width)
orderBy(~Sepal.Width, iris)
########################################
sampleBy(~Species, frac=0.1, data=iris)
# setosa 종만 추출
subset(iris, Species == "setosa")
# Sepal.Length > 5.0 AND Sepal.Width > 4.0인 경우만 추출
subset(iris, Sepal.Length > 5.0 & Sepal.Width > 4.0)
# 조건 만족 + 원하는 열만 선택
subset(iris, Sepal.Length > 5.0 & Sepal.Width > 4.0,
select = c("Petal.Length", "Petal.Width"))
# merge : 데이터를 공통된 값에 기준하여 병합한다.
# ( 공통된 값이 아닌 것은 병합대상 에서 제외됨)
x = data.frame(name = c("a", "b", "c"), math = c(1, 2, 3))
y = data.frame(name = c("c", "b", "a"), english = c(4, 5, 6))
# 공통 열인 name을 기준으로 병합
merge(x, y)
x = data.frame(name = c("A", "b", "c"), math = c(1, 2, 3))
y = data.frame(name = c("c", "b", "a"), english = c(4, 5, 6))
# 공통 열인 name을 기준으로 병합
merge(x, y)
which(iris$Sepal.Length > 7)
Airquality = read.csv("airquality.csv")
Airquality = read.csv("airquality.csv")
Airquality = read.csv("airquality.csv")
getwd()
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality)
source("~/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science/Quiz-Code-gitignore/60241996-김민준-0324.R", echo=TRUE)
head(Airquality)
max(Airquality$Temp)
head(Airquality,5)
max_temp = max(airquality$Temp)
max_temp = max(airquality$Temp)
max_temp = max(airquality$Temp)
max_temp = max(Airquality$Temp)
(max_temp = max(airquality$Temp))
(max_temp = max(Airquality$Temp))
(subset(Airquality, Temp == max_temp, select = c(Month, Day))
(subset(Airquality, Temp == max_temp, select = c(Month, Day)))
(subset(Airquality, Temp == max_temp, select = c(Month, Day)))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
max(june_max_wind$Wind)
june_max_wind = max(Airquality$Wind, select)
june_max_wind = max(Airquality$Wind, Month == 6)
june_max_wind = max(Airquality$Wind, Month == 6)
june_max_wind = max(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp)
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp)
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
getwd()
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality) # 데이터셋의 자료구조
# (2) 이 데이터셋의 앞쪽 5개 내용만을 보이시오.
head(Airquality,5)
# (3) 기온(Temp)이 가장 높은 달은 언제인지 월과 일을 보이시오.
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
# (4) 6월달에 발생한 가장 강한 바람의 세기를 보이시오.
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
# (5) 7월달의 평균 기온(Temp) 를 보이시오.
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
# (6) 오존(Ozone) 농도가 100을 넘는 날이 며칠이나 되는지 보이시오.
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
##########
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality) # 데이터셋의 자료구조
# (2) 이 데이터셋의 앞쪽 5개 내용만을 보이시오.
head(Airquality,5)
# (3) 기온(Temp)이 가장 높은 달은 언제인지 월과 일을 보이시오.
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
# (4) 6월달에 발생한 가장 강한 바람의 세기를 보이시오.
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
# (5) 7월달의 평균 기온(Temp) 를 보이시오.
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
# (6) 오존(Ozone) 농도가 100을 넘는 날이 며칠이나 되는지 보이시오.
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
# QUIZ 0324
# 60241996 김민준 (데이터사이언스 전공)
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality) # 데이터셋의 자료구조
# (2) 이 데이터셋의 앞쪽 5개 내용만을 보이시오.
head(Airquality,5)
# (3) 기온(Temp)이 가장 높은 달은 언제인지 월과 일을 보이시오.
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
# (4) 6월달에 발생한 가장 강한 바람의 세기를 보이시오.
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
# (5) 7월달의 평균 기온(Temp) 를 보이시오.
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
# (6) 오존(Ozone) 농도가 100을 넘는 날이 며칠이나 되는지 보이시오.
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
install.packages("dplyr")
exam = read("exam.csv")
exam = read("exam.csv")
library(dplyr)
exam = read("exam.csv")
library(dplyr)
exam = read.csv("exam.csv")
library(dplyr)
exam = read.csv("exam.csv")
library(dplyr)
library(dplyr)
exam = read.csv("exam.csv")
library(dplyr)
exam = read.csv("exam.csv")
exam = read.csv("exam.csv")
library(dplyr)
exam = read.csv("csv_exam.csv")
exam %>% filter(class==1)
library(dplyr)
exam = read.csv("csv_exam.csv")
exam %>% filter(class==1)
exam %>% filter(class!=1)
exam %>% filter (class %in% c(1,3,5))
library(dplyr)
exam = read.csv("csv_exam.csv")
exam %>% filter(class==1)
exam %>% filter(class!=1)
exam %>% filter(math > 50)
exam %>% filter(math > 90 | english > 90)
exam %>% filter (class %in% c(1,3,5))
# 데이터 가공: [2] 변수 추출
exam %>% select(class, english)
exam %>% select(-english)
exam %>% filter(class==1) %>% select(english)
exam %>% arrange(math)
exam %>% arrange(class, desc(math))
exam %>% arrange(math)
# key 2개 descending
exam %>% arrange(class, desc(math))
########################################
library(dplyr)
exam = read.csv("csv_exam.csv")
# 데이터 가공: [1] 추출
exam %>% filter(class==1)
exam %>% filter(class!=1)
exam %>% filter(math > 50)
exam %>% filter(math > 90 | english > 90)
exam %>% filter (class %in% c(1,3,5))
# 데이터 가공: [2] 변수 추출
exam %>% select(class, english)
exam %>% select(-english)
# 데이터 가공 실습: 변수 추출
exam %>% filter(class==1) %>% select(english)
# 데이터 가공: [3] 정렬
exam %>% arrange(math)
# key 2개 descending
exam %>% arrange(class, desc(math))
exam %>% arrange(math)
# key 2개 descending
exam %>% arrange(class, desc(math))
midwest
Midwest
library(ggplot2)
library("ggplot2")
library("ggplot2")
midwest
midwest$ratio = midwest$popasian / midwest$poptotal
x = mean(midwest$ratio)
midwest$grade = ifelse(midwest$ratio >= x, "large", "small")
table(midwest$grade)
qplot(midwest$grade)
midwest %>% arrange(desc(ratio))
########################################
midwest %>% arrange(desc(ratio))
midwest %>% arrange(desc(ratio))
midwest %>% arrange(desc(ratio)) %>% head(10)
# 아시아 인들이 몰려있다 ~..
midwest_new = midwest %>%
arrange(desc(ratio)) %>%
select(county,ratio) %>% head(10)
midwest_new
exam %>% mutate (
total = math+english+science,
mean = (math + english + science) / 3,
test = ifelse (science >= 60, "pass", "fail")
exam %>% mutate (
(exam %>% mutate (
total = math+english+science,
mean = (math + english + science) / 3,
test = ifelse (science >= 60, "pass", "fail")
))
exam %>% mutate (
total = math+english+science,
mean = (math + english + science) / 3,
test = ifelse (science >= 60, "pass", "fail")
) %>% arrange(total)
exam %>% mutate (
total = math+english+science,
mean = (math + english + science) / 3,
test = ifelse (science >= 60, "pass", "fail")
) %>% arrange(total)
exam %>% mutate (
total = math+english+science,
mean = (math + english + science) / 3,
test = ifelse (science >= 60, "pass", "fail")
) %>% arrange(desc(total))
CASschools = read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv")
dir(CASschools)
str(CASschools)
CASschools = read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv")
str(CASschools)
head(CASschools)
CASschools %>% mutate (
mymean = ( read + math ) / 2,
ca_mean = mean(CASschools$mymean)
)
CASschools %>% mutate (
mymean = ( read + math ) / 2,
ca_mean = mean(mymean)
)
CASchools %>% filter(mymean > CA_mean) %>% arrange(desc(mymean)) %>% head(10) %>% select(county,school,mymean)
CASschools = read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv")
str(CASschools)
head(CASschools)
CASchools$mymean = ( CASschools$read + CASschools$math ) / 2
########################################
CASchools = read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv")
str(CASchools)
head(CASchools)
CASchools$mymean = ( CASchools$read + CASchools$math ) / 2
CA_mean = mean(CASchools$mymean)
CASchools %>% filter(mymean > CA_mean) %>% arrange(desc(mymean)) %>% head(10) %>% select(county,school,mymean)
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math)),
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math)),
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
n=n())
# 저장
write.csv(df, "analytics_output.csv", row.names = FALSE)
# 저장
write.csv(df, "analytics_output.csv", row.names = FALSE)
# 저장
write.csv(df, "analytics_output.csv", row.names = FALSE)
