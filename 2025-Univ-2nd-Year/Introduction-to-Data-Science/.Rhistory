q = c()
q_size = 0
enqueue = function(data) {
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue = function() {
first = q[1]
q <<- q[-1]
q_size <<- q_size - 1
return (fisrt)
}
size  = function() {
return (q_size)
}
return(list(enqueue=enqueue, dequeue=dequeue, size=size))
}
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$size()
q$dequeue()
q$dequeue()
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$size()
q$dequeue()
##################################################
queue = function() {
q = c()
q_size = 0
enqueue = function(data) {
q <<- c(q, data)
q_size <<- q_size + 1
}
dequeue = function() {
first = q[1]
q <<- q[-1]
q_size <<- q_size - 1
return (first)
}
size  = function() {
return (q_size)
}
return(list(enqueue=enqueue, dequeue=dequeue, size=size))
}
q = queue()
q$enqueue(1)
q$enqueue(2)
q$enqueue(3)
q$size()
q$dequeue()
##################################################
q_size = 100
q$size()
fun = function() {
answer = readline("y/n 을 입력하세요: ")
if(substr(answer,1,1) == "n")
cat("n을 입력받았습니다.")
else
cat("y를 입력받았습니다.")
}
ㅛ
funMenu = function() {
answer = menu(c("orange", "red", "blue"))
if(answer==1) {
cat("your input is orange")
} else if(answer == 2) {
cat("your input is grape")
} else {
cat("your input is kiwi")
}
}
1
funMenu = function() {
answer = menu(c("orange", "red", "blue"))
if(answer==1) {
cat("your input is orange")
} else if(answer == 2) {
cat("your input is grape")
} else {
cat("your input is kiwi")
}
}
funMenu()
fibolist()
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
whlie () {
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
whlie (i < size - 2) {
num2 = readline("input number") + num1
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
whlie (i < size - 2) {
while (i < size - 2) {
num1 = num2
num2 = readline("input number")
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (i < size - 2) {
num1 = num2
num2 = readline("input number")
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
}
fibolist()
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (i < size - 2) {
num1 = num2
num2 = readline("input number")
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
}
fibolist(20)
fibolist(20)
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greate rthan 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (i < size - 2) {
num1 = num2
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
}
print(fibonacci)
}
fibolist(20)
fibolist(20)
fibolist(3)
while (count < size) {
num1 = num2
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
count = count + 1
}
fibolist = function(size) {
if(size <= 2) {
stop("The size should be greater than 2")
}
num1 =1
num2 =1
fibonacci = c(num1, num2)
count = 2
while (count < size) {
num1 = num2
num2 = num2 + num1
fibonacci = c(fibonacci, num2)
count = count + 1
}
print(fibonacci)
}
fibolist(20)
install.packages(ggmap)
install.packages('ggmap')
install.packages('openxlsx')
register_google()
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
# AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk
library(ggmap)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
# AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk
library(ggmap)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
ggmap(map)
# AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk
library(ggmap)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
map <- get_googlemap(center = c(126.975684, 37.572752))
ggmap(map)
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap")
ggmap(map)
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap",
zoom=17)
ggmap(map)
map <- get_googlemap(center = c(126.975684, 37.572752))
ggmap(map)
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap")
ggmap(map)
# 지도 확대 및  축소
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap",
zoom=17)
ggmap(map)
# 지도 확대 및  축소
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap",
zoom=100)
ggmap(map)
# 지도 확대 및  축소
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap",
zoom=40)
ggmap(map)
# 지도 확대 및  축소
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap",
zoom=20)
ggmap(map)
# 지도 확대 및  축소
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap",
zoom=18)
ggmap(map)
map <- get_googlemap(center =
c(126.975684, 37.572752),
maptype="roadmap",
zoom=17,
size=c(320,320))
ggmap(map)
ggmap(map, extent="device")
# 주 이용 지도 출력
gc = geocode(enc2utf8("호미곶"))
gc
lonlat
lonlat = c(gc$lon, gc$lat)
lonlat
map = get_googlemap(center=lonlat)
ggmap(map)
map = get_googlemap(center=lonlat,
marker=gc)
ggmap(map)
# 주 이용 지도 출력
gc = geocode(enc2utf8("호미곶"))
gc
lonlat = c(gc$lon, gc$lat)
lonlat
map = get_googlemap(center=lonlat,
marker=gc)
ggmap(map)
# 주 이용 지도 출력
gc = geocode(enc2utf8("호미곶"))
gc
lonlat = c(gc$lon, gc$lat)
lonlat
map = get_googlemap(center=lonlat,
zoom=13,
marker=gc)
ggmap(map)
map = get_googlemap(center=lonlat,
# zoom = 13,
marker=gc)
ggmap(map)
ggmap(map)gc=geocode(enc2utf8("pyongyang, north korea"))
ggmap(map)
gc=geocode(enc2utf8("pyongyang, north korea"))
lonlat = c(gc$lon, gc$lat)
map=get_googlemap(center=lonlat, maptype="roadmap",
zoom=13, size=c(320,320))
ggmap(map)
# 주소 이용 지도 출력
ggmap(map)
gc=geocode(enc2utf8("pyongyang"))
lonlat = c(gc$lon, gc$lat)
map=get_googlemap(center=lonlat,
maptype="roadmap",
zoom=13,
size=c(320,320))
ggmap(map)
ggmap(map, extent = "device")
# 예제
library(openxlsx)
df=read.xlsx(file.choose(), sheet = 1, startRow = 4)
df=read.xlsx(file.choose(), sheet = 1, startRow = 4)
head(df)
head(df)
tail(df)
head(df)
tail(df)
#
head(df)
tail(df)
df2 = data.frame(lon=df[,7], lat=df[df,6], mag=df[,3])
# 첫째 시트의 4행부터 읽기
df=read.xlsx(file.choose(), sheet = 1, startRow = 4)
#
head(df)
tail(df)
df[,6] = gsub("N","",df[,6]) #위도 숫자 뒤 "N"제거 "" 없애라
df[,7] = gsub("E","",df[,7]) #경도 숫자 뒤 "N"제거 "" 없애라
df2 = data.frame(lon=df[,7], lat=df[df,6], mag=df[,3])
head(df)
tail(df)
df[,6] = gsub("N","",df[,6]) #위도 숫자 뒤 "N"제거 "" 없애라
df[,7] = gsub("E","",df[,7]) #경도 숫자 뒤 "N"제거 "" 없애라
df2 = data.frame(lon=df[,7], lat=df[df,6], mag=df[,3])
head(df)
tail(df)
df[,6] = gsub("N","",df[,6]) #위도 숫자 뒤 "N"제거 "" 없애라
df[,7] = gsub("E","",df[,7]) #경도 숫자 뒤 "N"제거 "" 없애라
df2 = data.frame(lon=df[,7], lat=df[,6], mag=df[,3])
str(df2)
str(df2)
df2[,1] = as.numeric(as.character(df2[,1]))
df2[,2] = as.numeric(as.character(df2[,2]))
df2[,3] = as.numeric(as.character(df2[,3]))
str(df2)
cen = c((max(df2$lon) +min(df2$lon))/2,
(max(df2$lat) + min(df2$lat))/2)
# 지도 중심 좌표 설정
# center
# 모든 경도 정보의 제일 큰 것 + 제일 작은 것 / 2
map = get_googlemap(center=cen, zoom6)
# 지도 중심 좌표 설정
# center
# 모든 경도 정보의 제일 큰 것 + 제일 작은 것 / 2
map = get_googlemap(center=cen, zoom=6) # zoom 600
gmap == ggmap(map)
gmap = ggmap(map)
gmap + geom_point(data=de2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
alpha=0.5)
cen = c((max(df2$lon) +min(df2$lon))/2,
(max(df2$lat) + min(df2$lat))/2)
# 지도 중심 좌표 설정
# center
# 모든 경도 정보의 제일 큰 것 + 제일 작은 것 / 2
map = get_googlemap(center=cen, zoom=6) # zoom 600
gmap = ggmap(map)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
alpha=0.5)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
# alpha=0.5
)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
alpha=0.5
)
gmap = ggmap(map)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag * 2,
alpha=0.5
)
map = get_googlemap(center=cen, zoom=6) # zoom 600
gmap = ggmap(map)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag * 1.2,
alpha=0.5
)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
alpha=0.5
)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
alpha=0.7
)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
alpha=0.6
)
gmap + geom_point(data=df2,
aes(x=lon,y=lat),
color="red",
size=df2$mag,
alpha=0.5
)
eu_data = read.csv('EU_GDP.csv')
str(eu_data)
eu_data$gdp = gsub(",", "", eu_data$gdp)
eu_data$gdp = as.numeric(eu_data$gdp)
str(eu_data)
gc=geocode(eu_data$name)
df=data.frame(city=eu_data$name, lon =gc$lon, lat=gc$lat, gdp=eu_data$gdp)
cen = colMeans(gc)
map = get_googlemap(center = cen , zoom = 4, scale = 2, size = c(640,640),
maptype="hybrid")
gmap = ggmap(map)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 100000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 100000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 1000000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 100000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 10000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 100000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "orange",
size = df$gdp / 100000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 100000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
borders = "green",
size = df$gdp / 100000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 150000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 800000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 80000,
alpha = 0.5)
gmap + geom_point(data = df,
aes(x=lon, y =lat),
color = "red",
size = df$gdp / 100000,
alpha = 0.5)
