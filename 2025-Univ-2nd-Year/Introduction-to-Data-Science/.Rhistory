sepal.stat1
plot(iris$Sepal.Width)
data(iris)
plot(iris$Sepal.Width)
stat1=boxplot(iris$Sepal.Width)
stat1
data(iris)
plot(iris$Sepal.Width)
sepal.stats1=boxplot(iris$Sepal.Width)
sepal.stats1
sepal.stat2=boxplot(speal.width ~ Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(speal.width ~ Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(spepal.width ~ Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(sepal.width ~ Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(Sepal.width ~ Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(Sepal.width ~ Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(Sepal.Width ~ Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(Sepal.Width~Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Ires Species")
sepal.stat2=boxplot(Sepal.Width~Species,
data = iris,
notch = TRUE,
col=c("blue", "green", "red"),
xlab = "Iris Species")
sepal.stat2=boxplot(Sepal.Width~Species,
data = iris,
col=c("blue", "green", "red"),
xlab = "Iris Species")
sepal.stat2=boxplot(Sepal.Width~Species,
data = iris,
notch = TRUE.
col=c("blue", "green", "red"),
sepal.stat2=boxplot(Sepal.Width~Species,
data = iris,
notch = TRUE,
col=c("blue", "green", "red"),
xlab = "Iris Species")
ggplot(data=mpg,
aes(x=displ, y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
ggplot(data=mpg,
aes(x=displ, y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
ggplot(data=mpg,
aes(
x=displ,
y=hwy)
) + geom_point() + xlim(3,6) + ylim(10,30)
df_mpg
df_mpg =
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
df_mpg
ggplot(data=df_mpg, aes(x=drv, y=mean_hwy)) + geom_col()
ggplot(data=mpg, aes(x=drv)) + geom_bar()
ggplot(data=mpg, aes(x=drv, y=hwy)) + geom_boxplot()
# 상자 그림
# driving 방식별 자동차 수
ggplot(data=mpg, aes(x=drv, y=hwy)) + geom_boxplot()
# 선그래프
# 시간에 따라 달라지는 데이터를 표현할 때 이용
# 시계열 그래프
ggplot(data=economics, aes(x=date, y=unemploy)) + geom_line()
# viollin plot 은 직관적으로 확인 가능
ggplot(iris,
aes(
x=Species,
y=Petal.Length)
) + geom_violin()
# viollin plot 은 직관적으로 확인 가능
ggplot(iris,
aes(
x=Species,
y=Petal.Length)
) + geom_violin()
# violin plot
p = ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin()
p
# flip
p + coord_flip()
# trim
ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin(trim = FALSE)
# Add median and quartile (boxplot)
p + geom_boxplot(width = 0.1)
# jitter plot (흩뿌린 점 추가)
p + geom_jitter(shape = 16, position = position_jitter(0.2))
# violin plot
p = ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin()
p
# flip
p + coord_flip()
# trim
ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin(trim = FALSE)
# Add median and quartile (boxplot)
p + geom_boxplot(width = 0.1)
# jitter plot (흩뿌린 점 추가)
p + geom_jitter(shape = 16, position = position_jitter(0.2))
# color (Species별 색깔 구분)
p <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_violin(trim = FALSE)
# jitter plot (흩뿌린 점 추가)
p + geom_jitter(shape = 16, position = position_jitter(0.2))
# color (Species별 색깔 구분)
p <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_violin(trim = FALSE)
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 gitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.2))
# Add median and quartile (boxplot)
p + geom_boxplot(width = 0.1)
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 gitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.2))
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 gitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.2))
# violin plot
p = ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin()
p
# flip
p + coord_flip()
# trim
ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin(trim = FALSE)
# Add median and quartile (boxplot)
p + geom_boxplot(width = 0.1)
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 gitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.2))
p <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_violin(trim = FALSE)
p <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_violin(trim = FALSE)
p
# viollin plot 은 직관적으로 확인 가능
ggplot(iris,
aes(
x=Species,
y=Petal.Length)
) + geom_violin()
# viollin plot 은 직관적으로 확인 가능
ggplot(iris,
aes(
x=Species,
y=Petal.Length)
) + geom_violin()
# violin plot
p = ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin()
p
# flip
p + coord_flip()
# trim
# trim 옵션: 밀도 끝까지 보여주기
ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin(trim = FALSE)
# trim
# trim 옵션: 밀도 끝까지 보여주기
ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_violin(trim = FALSE)
# Add median and quartile (boxplot)
p + geom_boxplot(width = 0.1)
# color (Species별 색깔 구분)
# Species 값으로 색칠
p <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_violin(trim = FALSE)
p
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 jitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.4))
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 jitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.5))
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 jitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.1))
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 jitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.6))
# jitter plot (흩뿌린 점 추가)
# 0.2 정도로 jitter 를 표시해달라
p + geom_jitter(shape = 16, position = position_jitter(0.2))
##################################################
library(ggplot2)
mpg = as.data.frame(mpg)
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
y=mean_cty
)) + geom_col()
##################################################
library(ggplot2)
mpg = as.data.frame(mpg)
df = mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty)) %>%
arrange(des(mean_cty)) %>%
head(5)
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
y=mean_cty
)) + geom_col()
#
#
#
library(ggplot2)
mpg = as.data.frame(mpg)
df = mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty)) %>%
arrange(des(mean_cty)) %>%
head(5)
##################################################
library(ggplot2)
mpg = as.data.frame(mpg)
df = mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
y=mean_cty
)) + geom_col()
#
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
# x=reorder(manufacturer, -mean_cty),
x=reorder(manufacturer),
y=mean_cty
)) + geom_col()
mpg = as.data.frame(mpg)
df = mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
# x=reorder(manufacturer, -mean_cty),
x=reorder(manufacturer),
y=mean_cty
)) + geom_col()
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
# x=reorder(manufacturer, -mean_cty),
x=manufacturer,
y=mean_cty
)) + geom_col()
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
# x=manufacturer,
y=mean_cty
)) + geom_col()
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
# x=manufacturer,
y=mean_cty
)) + geom_col()
df = mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty)) %>%
# arrange(desc(mean_cty)) %>%
head(5)
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
# x=manufacturer3, # 알파벳 순으로 정렬
y=mean_cty
)) + geom_col()
df = mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty)) %>%
# arrange(desc(mean_cty)) %>%
head(5)
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
# x=manufacturer3, # 알파벳 순으로 정렬
y=mean_cty
)) + geom_col()
df = mpg %>%
filter(class=="suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
# reorder(manufacturer, -mean_cty)는 그래프에서 x축 순서를 정렬
ggplot(data=df,
aes(
x=reorder(manufacturer, -mean_cty),
# x=manufacturer3, # 알파벳 순으로 정렬
y=mean_cty
)) + geom_col()
q1 = myAirQuality %>%
filter(!is.na(PM10))  %>%
group_by(district)  %>%
summarise(m = mean(PM10))  %>%
##################################################
# 5. 1-4의 질문을 2022년 대기질 자료에 대해 적용하시오.
myAirQuality2 = read.csv(
"seoulAirQuality2022.csv",
header = TRUE,
fileEncoding = "CP949",
encoding = "UTF-8"
)
q1 = myAirQuality %>%
filter(!is.na(PM10))  %>%
group_by(district)  %>%
summarise(m = mean(PM10))  %>%
arrange(m)
ggplot(data =q1, aes(x=district, y=m)) + geom_bar()
#
# 60241996 김민준 (융합소프트웨어학부 데이터사이언스 전공)
myAirQuality = read.csv(
"seoulAirQuality2021.csv",
header = TRUE,
fileEncoding = "CP949",
encoding = "UTF-8"
)
library(lubridate)
library(dplyr)
library(tidyr)
dim(myAirQuality)
str(myAirQuality)
names(myAirQuality) = c("date", "district", "PM10", "PM2.5")
myAirQuality = myAirQuality %>%
filter(district != "평균")
# levels(myAirQuality$district) 를 해보니
# 평균이 구 항목에 있어 제거하였습니다.
myAirQuality$district = as.factor(myAirQuality$district)
levels(myAirQuality$district)
myAirQuality$date = as.Date(myAirQuality$date)
myAirQuality$year = year(myAirQuality$date)
myAirQuality$month = month(myAirQuality$date)
myAirQuality$day = day(myAirQuality$date)
# 계절 분류
myAirQuality$season <- ifelse(
month(myAirQuality$date) %in% c(3, 4, 5), "spring",
ifelse(month(myAirQuality$date) %in% c(6, 7, 8), "summer",
ifelse(month(myAirQuality$date) %in% c(9, 10, 11), "fall", "winter"))
)
myAirQuality$season = as.factor(myAirQuality$season)
levels(myAirQuality$season)
head(myAirQuality)
# 1.각 구별로 미세먼지의 평균 값을 구하시오.
# 미세먼지의 평균이 높은 5개구는 어디인가?
# 답: 동작구, 양천구, 서초구, 강서구, 강북구
myAirQuality %>%
filter(!is.na(PM10)) %>%
group_by(district) %>%
summarise(mean_pm10 = mean(PM10)) %>%
arrange(desc(mean_pm10)) %>%
head(5)
# 2. 가장 미세먼지가 높았던 구와 그때 날짜는?
# 답: 2021-05-08 중구
myAirQuality %>%
filter(!is.na(PM10)) %>%
select(date, district, PM10) %>%
arrange(desc(PM10)) %>%
head(1)
# 3. 가장 초미세먼지가 낮았던 구와 그때 날짜는?
# 답: 2021-12-31   마포구
# 초미세먼지 농도 PM 2.5 가 1 이 나오는 경우가 많아,
# 제일 상단에 오는 값으로 추출하였습니다.
myAirQuality %>%
filter(!is.na(PM2.5)) %>%
select(date, district, PM2.5) %>%
arrange(PM2.5) %>%
head(1)
# 4. 계절별로 미세먼지 및 초미세먼지의 평균을 구하시오.
# 가장 높은 미세먼지를 보이는 계절은?
# 답: spring(봄)
myAirQuality %>%
filter(!is.na(PM2.5) & !is.na(PM10)) %>%
group_by(season) %>%
summarise(mean_total = mean((PM10 + PM2.5) / 2))  %>%
arrange(desc(mean_total))
q1 = myAirQuality %>%
filter(!is.na(PM10))  %>%
group_by(district)  %>%
summarise(m = mean(PM10))  %>%
arrange(m)
ggplot(data =q1, aes(x=district, y=m)) + geom_bar()
# 4. 계절별로 미세먼지 및 초미세먼지의 평균을 구하시오.
# 가장 높은 미세먼지를 보이는 계절은?
# 답: spring(봄)
library(ggplot2)
myAirQuality %>%
filter(!is.na(PM2.5) & !is.na(PM10)) %>%
group_by(season) %>%
summarise(mean_total = mean((PM10 + PM2.5) / 2))  %>%
arrange(desc(mean_total))
q1 = myAirQuality %>%
filter(!is.na(PM10))  %>%
group_by(district)  %>%
summarise(m = mean(PM10))  %>%
arrange(m)
ggplot(data =q1, aes(x=district, y=m)) + geom_bar()
ggplot(data =q1, aes(x=district, y=m)) + geom_col()
ggplot(data =q1, aes(x=district, y=m)) + geom_col() + coord_flip()
ggplot(data=q1,
aes(x=reorder(district,-m),y=m))+ geom_col() +coord_flip()
q1=myAirQuality %>%
filter(!is.na(PM10)) %>%
group_by(district)%>%
summarise(m=mean(PM10)) %>%
arrange(m) %>%
head(5)
ggplot(data=q1,
aes(x=reorder(district,-m),y=m))+ geom_col() +coord_flip()
table(myAirQuality$season)
ggplot(data=pm10,
aes(
x=season,
y=pm10)) + geom_col()
ggplot(data=pm10,
aes(
x=season,
y=pm10)) + geom_col()
table(myAirQuality$season)
ggplot(data=pm10,
aes(
x=season,
y=mean_total)) + geom_col()
pm10 = AirQuality %>%
filter(!is.na(PM2.5) & !is.na(PM10)) %>%
group_by(season) %>%
summarise(mean_total = mean((PM10 + PM2.5) / 2))  %>%
arrange(desc(mean_total))
table(myAirQuality$season)
ggplot(data=pm10,
aes(
x=season,
y=mean_total)) + geom_col()
######## ggplot
q1 = myAirQuality %>%
filter(!is.na(PM10))  %>%
group_by(district)  %>%
summarise(m = mean(PM10))  %>%
arrange(m)
ggplot(data=pm10,
aes(
x=season,
y=mean_total)) + geom_col()
library(ggplot2)
pm10 = AirQuality %>%
filter(!is.na(PM2.5) & !is.na(PM10)) %>%
group_by(season) %>%
summarise(mean_total = mean((PM10 + PM2.5) / 2))  %>%
arrange(desc(mean_total))
library(ggplot2)
pm10 = myAirQuality %>%
filter(!is.na(PM2.5) & !is.na(PM10)) %>%
group_by(season) %>%
summarise(mean_total = mean((PM10 + PM2.5) / 2))  %>%
arrange(desc(mean_total))
table(myAirQuality$season)
ggplot(data=pm10,
aes(
x=season,
y=mean_total)) + geom_col()
ggplot(data=pm10,
aes(
x=reorder(season, -mean_total),
y=mean_total)) + geom_col()
pm10 = myAirQuality %>%
filter(!is.na(PM2.5) & !is.na(PM10)) %>%
group_by(season) %>%
summarise(mean_total = mean((PM10 + PM2.5) / 2))  %>%
arrange(desc(mean_total))
table(myAirQuality$season)
ggplot(data=pm10,
aes(
x=reorder(season, -mean_total),
y=mean_total)) + geom_col()
View(iris)
