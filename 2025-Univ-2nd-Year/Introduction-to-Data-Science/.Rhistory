fruit$Name
fruit$QTY
# 여러 열 추출
fruit[, 2:3]
# 파생변수 생성
fruit$TotalPrice = fruit$Prices * fruit$QTY
fruit
# 데이터 크기
dim(iris)          # [행, 열]
nrow(iris)         # 행 수
ncol(iris)         # 열 수
colnames(iris)     # 열 이름
# 구조 및 요약 정보
class(iris)        # 클래스 (data.frame)
str(iris)          # 구조 보기
# 특정 열의 고유값
unique(iris[, 5])  # Species 컬럼
# 5번째 열(Species)은 문자형이므로 제외
colSums(iris[, -5])     # 열별 합계
colMeans(iris[, -5])    # 열별 평균
rowSums(iris[, -5])     # 행별 합계
rowMeans(iris[, -5])    # 행별 평균
is.data.frame(iris)     # TRUE
is.matrix(iris)         # FALSE
# 구조 보기
state.x77
str(state.x77)
# 클래스 확인
class(state.x77)  # "matrix"
# 매트릭스를 데이터프레임으로 변환
new_state = data.frame(state.x77)
new_state
str(new_state)
class(new_state)  # "data.frame"
# 데이터 크기
dim(iris)          # [행, 열]
nrow(iris)         # 행 수
ncol(iris)         # 열 수
colnames(iris)     # 열 이름
# 구조 및 요약 정보
class(iris)        # 클래스 (data.frame)
str(iris)          # 구조 보기
# 특정 열의 고유값
unique(iris[, 5])  # Species 컬럼
# 5번째 열(Species)은 문자형이므로 제외
colSums(iris[, -5])     # 열별 합계
colMeans(iris[, -5])    # 열별 평균
rowSums(iris[, -5])     # 행별 합계
rowMeans(iris[, -5])    # 행별 평균
is.data.frame(iris)     # TRUE
is.matrix(iris)         # FALSE
#########################################
# 구조 보기
state.x77
str(state.x77)
# 클래스 확인
class(state.x77)  # "matrix"
# 매트릭스를 데이터프레임으로 변환
new_state = data.frame(state.x77)
new_state
str(new_state)
class(new_state)  # "data.frame"
# 처음 4개 열만 숫자형이므로 matrix로 변환 가능
class(iris)  # "data.frame"
new_iris_mat = as.matrix(iris[, 1:4])
new_iris_mat
class(new_iris_mat)  # "matrix"
# 문자형 벡터 생성
f = c("A", "B", "B", "O", "AB", "A")
# factor로 변환
f_factor = factor(f)
# 구조 확인
str(f)
str(f_factor)
class(f_factor)
# 출력
f
f_factor
# Factor 레벨 확인
levels(f_factor)
# 특정 요소 확인
f[5]            # "AB"
f_factor[5]     # AB
# 요소 수정
f_factor[7] = "B"     # ✅ 기존 레벨이라 가능
f_factor[8] = "C"     # ❌ 없는 레벨이라 경고 발생
# 숫자로 변환
as.integer(f_factor)
# 출력 예: [1] 1 3 3 4 2 1 3 NA
# 문자형 벡터 생성
f = c("A", "B", "B", "O", "AB", "A")
# factor로 변환
f_factor = factor(f)
# 구조 확인
str(f)
str(f_factor)
class(f_factor)
# 출력
f
f_factor
# Factor 레벨 확인
levels(f_factor)
# 특정 요소 확인
f[5]            # "AB"
f_factor[5]     # AB
# 요소 수정
f_factor[7] = "B"     # ✅ 기존 레벨이라 가능
f_factor[8] = "C"     # ❌ 없는 레벨이라 경고 발생
# 숫자로 변환
as.integer(f_factor)
# 출력 예: [1] 1 3 3 4 2 1 3 NA
f_factor
f_factor
f_factor
# 리스트 생성 (키-값 구조)
member <- list(
name = "Lee",
address = "seoul",
tel = "01088881111",
ssn = 010815
)
# 리스트 내용 확인
member
# $name
# [1] "Lee"
# $address
# [1] "seoul"
# $tel
# [1] "01088881111"
# $ssn
# [1] 10815
# 리스트의 특정 값 추출
member$name
member[1:3]
# 리스트에 값 추가
member$pay <- 100
member
# $pay
# [1] 100
# 리스트 생성 (키-값 구조)
member <- list(
name = "Lee",
address = "seoul",
tel = "01088881111",
ssn = 010815
)
# 리스트 내용 확인
member
# $name
# [1] "Lee"
# $address
# [1] "seoul"
# $tel
# [1] "01088881111"
# $ssn
# [1] 10815
# 리스트의 특정 값 추출
member$name
member[1:3]
# 리스트에 값 추가
member$pay <- 100
member
# $pay
# [1] 100
getwd()
score=read.csv("score.csv")
score
fruit
no = c(1,2,3,4)
name = c("apple", "pear", "banana", "peach")
price = c(100, 200, 300, 400)
fruit = data.frame(No=no, Name=name, Price=price)
fruit
write.csv(fruit, "fruit.csv")
getwd()
getwd()
(x=read.csv("score.csv"))
str(x)
getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x$score)
mean(x$score, na.rm=T)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x$score)
mean(x$score, na.rm=T)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x$1score, na.rm=T)
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
(x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1))
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil")
str(x1))
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
# getwd()
(x=read.csv("score.csv"))
str(x)
x$name = as.character(x$name)
########################################
(x1 = read.csv("c.csv"))
str(x1)
########################################
x1 = read.csv("c.csv", na.strings = c("nil"))
str(x1)
mean(x1$score)
mean(x1$score, na.rm=T)
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
x
y
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
rm(list=ls())
x
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
rm(list=ls())
x
x = 1:5
y = 6:10
save(x,y, file="xy.RData")
rm(list=ls())
load("xy.RData")
x
y
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
myTCASchools = as_tibble(myCASchools)
install.packages("tibble")
Library(tibble)
library(tibble)
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
myTCASchools = as_tibble(myCASchools)
class(myTCASchools)
myTCASchools
########################################
url = "https://vincentarelbundock.github.io/Rdatasets/csv/AER/CASchools.csv"
myCASchools = read.csv(url)
str(myCASchools)
head(myCASchools)
########################################
myTCASchools = as_tibble(myCASchools)
class(myTCASchools)
myTCASchools
summaryBy(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
# 1. 패키지 설치 (처음 한 번만)
install.packages("doBy")
# 2. 패키지 로드 (매번 사용 전)
library(doBy)
# 3. summaryBy 사용
summaryBy(Sepal.Width + Sepal.Length ~ Species, data = iris)
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
# ~ 는 Species 를 기준으로
summaryBy(Petal.Width+Peatal.Length~Species, iris)
summary(iris) # 데이터프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산
summaryBy(Sepal.Width+Sepal.Length~Species, iris)
# ~ 는 Species 를 기준으로
summaryBy(Petal.Width+Petal.Length~Species, iris)
########################################
order(iris$Sepal.Width)
orderBy(~Sepal.Width, iris)
########################################
sampleBy(~Species, frac=0.1, data=iris)
# setosa 종만 추출
subset(iris, Species == "setosa")
# Sepal.Length > 5.0 AND Sepal.Width > 4.0인 경우만 추출
subset(iris, Sepal.Length > 5.0 & Sepal.Width > 4.0)
# 조건 만족 + 원하는 열만 선택
subset(iris, Sepal.Length > 5.0 & Sepal.Width > 4.0,
select = c("Petal.Length", "Petal.Width"))
# merge : 데이터를 공통된 값에 기준하여 병합한다.
# ( 공통된 값이 아닌 것은 병합대상 에서 제외됨)
x = data.frame(name = c("a", "b", "c"), math = c(1, 2, 3))
y = data.frame(name = c("c", "b", "a"), english = c(4, 5, 6))
# 공통 열인 name을 기준으로 병합
merge(x, y)
x = data.frame(name = c("A", "b", "c"), math = c(1, 2, 3))
y = data.frame(name = c("c", "b", "a"), english = c(4, 5, 6))
# 공통 열인 name을 기준으로 병합
merge(x, y)
which(iris$Sepal.Length > 7)
Airquality = read.csv("airquality.csv")
Airquality = read.csv("airquality.csv")
Airquality = read.csv("airquality.csv")
getwd()
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality)
source("~/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science/Quiz-Code-gitignore/60241996-김민준-0324.R", echo=TRUE)
head(Airquality)
max(Airquality$Temp)
head(Airquality,5)
max_temp = max(airquality$Temp)
max_temp = max(airquality$Temp)
max_temp = max(airquality$Temp)
max_temp = max(Airquality$Temp)
(max_temp = max(airquality$Temp))
(max_temp = max(Airquality$Temp))
(subset(Airquality, Temp == max_temp, select = c(Month, Day))
(subset(Airquality, Temp == max_temp, select = c(Month, Day)))
(subset(Airquality, Temp == max_temp, select = c(Month, Day)))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
max(june_max_wind$Wind)
june_max_wind = max(Airquality$Wind, select)
june_max_wind = max(Airquality$Wind, Month == 6)
june_max_wind = max(Airquality$Wind, Month == 6)
june_max_wind = max(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality$Wind, Month == 6)
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp)
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp)
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
getwd()
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality) # 데이터셋의 자료구조
# (2) 이 데이터셋의 앞쪽 5개 내용만을 보이시오.
head(Airquality,5)
# (3) 기온(Temp)이 가장 높은 달은 언제인지 월과 일을 보이시오.
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
# (4) 6월달에 발생한 가장 강한 바람의 세기를 보이시오.
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
# (5) 7월달의 평균 기온(Temp) 를 보이시오.
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
# (6) 오존(Ozone) 농도가 100을 넘는 날이 며칠이나 되는지 보이시오.
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
##########
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality) # 데이터셋의 자료구조
# (2) 이 데이터셋의 앞쪽 5개 내용만을 보이시오.
head(Airquality,5)
# (3) 기온(Temp)이 가장 높은 달은 언제인지 월과 일을 보이시오.
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
# (4) 6월달에 발생한 가장 강한 바람의 세기를 보이시오.
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
# (5) 7월달의 평균 기온(Temp) 를 보이시오.
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
# (6) 오존(Ozone) 농도가 100을 넘는 날이 며칠이나 되는지 보이시오.
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
# QUIZ 0324
# 60241996 김민준 (데이터사이언스 전공)
Airquality = read.csv("airquality.csv")
# (1) 이 데이터셋의 자료구조와 변수들을 보이시오.
str(Airquality) # 데이터셋의 자료구조
# (2) 이 데이터셋의 앞쪽 5개 내용만을 보이시오.
head(Airquality,5)
# (3) 기온(Temp)이 가장 높은 달은 언제인지 월과 일을 보이시오.
(max_temp = max(Airquality$Temp))
subset(Airquality, Temp == max_temp, select = c(Month, Day))
# (4) 6월달에 발생한 가장 강한 바람의 세기를 보이시오.
june_max_wind = subset(Airquality, Month == 6)
max(june_max_wind$Wind)
# (5) 7월달의 평균 기온(Temp) 를 보이시오.
july_mean_temp = subset(Airquality, Month == 7)
mean(july_mean_temp$Temp)
# (6) 오존(Ozone) 농도가 100을 넘는 날이 며칠이나 되는지 보이시오.
ozone_days = subset(Airquality, Ozone > 100)
nrow(ozone_days)
