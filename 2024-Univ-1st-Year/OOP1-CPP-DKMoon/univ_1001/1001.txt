Scope 범위

File Scope
    - file 전체에서 유효
Function protype Scope
    - 함수 원형 안에서 유효
    - ex 함수 원형의 파라미터들
Function Scope
    - 함수 안에서 유효
    - ex 함수 내의 라벨들 (goto문)
Block scope
    - 복합문(블록) 안에서 유효
    - 블록 내의 지역 변수들

C++ Scope 종류
Global scope
    - 글로벌하게 유효
Namespace scope
    - 하나의 이름 공간 안에서 유효
class scope
    - 클래스 안에서 유효
    - 멤버 함수 ,멤버 변수
local Scope
    - 함수 몸체나 복합문 안에서 유효
statement Scope
    - 하나의 문장 안에서 유효

### class scope이 멤버 함수의 local scope 보다 넓음!!!

객체의 멤버를 전급할 때는 . 연산자 사용
포인터를 통해 멤버 접근 시 -> 연산자 사용
. -> 는 멤버 접근 연산자

함수의 주소 얻어내기
배열의 이름이 배열 시작 주소인것처럼 함수의 이름도 함수의 주소다.
함수 이름 앞에 주소 연산자를 붙일 수도 있다.

함수의 포인터 변수 표기법
리턴타입(* 변수이름)(인자타입들);
void f (int a) {}
void(*pFunc)(int) = f;
pFunc 를 따라가면 f 가 나와.
(*pFunc)(10);
pFunc(10);

함수 포인터 변수의 의미
일반 포인터와 마찬가지로 주소를 저장
다만 그 주소가 함수의 기계어 코드 시작 주소

멤버 함수 내에서 this 포인터를 이용한 명시적 멤버 접근
멤버 함수가 호출 될 때 " 어떤 객체가 대상인지 " 알 수 있어야 함 .
멤버 함수 호출의 대상이 되는 객체의 주소를 저장하는 this 포인터가 주어짐

cout << this-> id << this -> gpa << endl;

객체의 동적할당: new 연산자와 delete 연산자
동적할당 new 동적해제 delete
여러개의 배열로서 동적할당할 때는 new 타입[개수] 형태로 쓴다.
배열로 동적할당한 것을 해제할 때는 delete[] 형태로 쓴다. 

int * p = new int[6];
~
delete[] p;

new,delte malloc,free 는 섞어쓰면 안됨.
stack 후입선출 방식으로 메모리가 정리
    이 방식으로는 메모리를 할당하고 연산햐는 함수를 만들 수 없음.

메모리 반환 시점이 다른 경우를 위해 동적할당이 존재
    이때는 heap 영역이 활용
    heap 은 비어있는 메모리와 사용중인 메모리가 마구잡이로 존재
    
new, delete는 생성자/소멸자를 호출해준다.


bool
cpp 에서는 명시적으로 bool 타입을 두고 있다.

const 키워드
코드를 작성하다보면 어떤 부분들은 읽기 전용응로 지정해야함
다수가 협업할 때 뭐가 읽기 전용인지 판단하기 어려움
컴파일러 에게 특정 영역은 일ㄹㄱ기 전용인데 이 규칙을 어기면 컴파일러 오류로
알려달라고 할 수 있음 이것이 const
컴파일 타임에 컴파일러가 기계어를 생산해내면서 이 규칙을 어겼는지 확인하는 . . .

const int MAX = 100; // MAX 라는 읽기 전용 정수 변수
const double PI = 3.14159;
해당 변수들은 읽기 전용이므로 쓰기를 목적으로 하는 포인터에 주소를 줄 수 없음.

int * ptr; 
ptr 이란 변수는 int를 가르키는 포인터, 따라가면 int 가 나옴.
즉 , 4바이트 읽음

pointer to constconst 타입 *변수명;
const int *ptr;
위 ptr 은 포인터 변수인데 그걸 따라가면 const int 가 나온다 라는 뜻
const int 는 변경 불가이기 때문에 *ptr= 10; 은 불가이기하지만
ptr 자체는 변수이므로 ptr = &a; 처럼 변수 자체의 값을 바꿀 수는 있다.
어쩌면 당연한 말 ㅇㅇ

void g(const int *ptr);
// a가 갖고 있는 값이 무엇이던간에 읽기만할게 훼손하지 않아.

int main() {
    int a = 0;
    g(&a);
}

const pointer
int * const ptr = &a;
ptr은 const 에요. 따라가면 int 가 나와.

const 가 붙은 멤버 변수는 어디서 초기화 할까?
    1) 멤버 변수 초기화 목록 
    2) in - class 초기화를 해야한다
    모든 객체가 동일한 값을 갖는 것이 아니라면
    멤버 변수 초기화 목록이 적절.

typedef 기존타입 새타입;
    기존 타입에 대한 별명을 지정
global scope, namespace scope, class scope, local scope 에서 사용 가능 

typedef int IDType;
무슨 타입인지는 모르겠지만, 어쨌거나 id type

cpp에서는 using 새타입 = 예전타입;
using IdType = int;

클래스 스콥 내에 정의된 타입 접근하기
클래스이름::메서트이름
Student::IdType id; // OK

autod: cpp 에서의 타입 추론 
cpp 에서는 타입 정보가 중요
typedef 가 일정 부분 도움이 되긴 하지만 여전히 번거로움
auto 라는 키워드로 타입을 추론하게 할 수 있음
초기값을 기반으로 이 변수의 타입을 추론함
오토 사용시 {} 초기화 대신 = 을 쓸 것을 권장함.

while (표현식) 무낮ㅇ;
do 문장 while (표현식);
for (표현식; 표현식; 표현식) 문장

기존 반복문이 주어진 표현식이 참일 경우 반복하는데는 유용하다
그러나 원소를 순회하는데는 다소 불편

c++ 의 범위기반 for문 
for ( 변수 1개 정의 : 순회가능목록 ) 문장
순회가능목록의 원소를 주어진 변수를 복사해서 문을 실행한다
복사를 피하기 위해서 참조를 쓸 수 있는데 이는 참조를 배우고 살펴보기로
ex) 
int array[] = { 1,2,3,4,5 }
for (int element : array) {
    cout << element;
}

범위기반 for 문에서 순회가능목록 위치에 포인터
배열은 사용 가능하나, 배열의 시작주소를 포인터에 넣으면 쓸 수 없다
많은 경우 범위 기반 for 에 구체적인 타입 명시 대신 auto 를 같이 사용한다
auto element : array








